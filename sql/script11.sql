-- Exclui o banco de dados DBPROFESSOR se ele existir
DROP DATABASE IF EXISTS DBPROFESSOR;

-- Desativa a configuração que impede atualizações inseguras
SET SQL_SAFE_UPDATES = 0;

-- Cria o banco de dados DBPROFESSOR
CREATE DATABASE DBPROFESSOR;

-- Seleciona o banco de dados DBPROFESSOR para uso
USE DBPROFESSOR;

-- Cria a tabela DOCENTE para armazenar informações sobre professores
CREATE TABLE DOCENTE (
    IDDOCENTE INT NOT NULL PRIMARY KEY AUTO_INCREMENT, -- Identificador único do docente
    NOME VARCHAR(45)  -- Nome do docente
);

-- Cria a tabela DISCIPLINA para armazenar informações sobre disciplinas
CREATE TABLE DISCIPLINA (
    IDDISCIPLINA INT NOT NULL PRIMARY KEY AUTO_INCREMENT, -- Identificador único da disciplina
    NOME VARCHAR(45),  -- Nome da disciplina
    CARGA_HORARIA INT NOT NULL  -- Carga horária da disciplina
);

-- Cria a tabela PROFESSOR para estabelecer relações entre professores e disciplinas
CREATE TABLE PROFESSOR (
    IDDOCENTE INT NOT NULL,  -- Identificador do docente
    IDDISCIPLINA INT NOT NULL,  -- Identificador da disciplina
    PRIMARY KEY (IDDOCENTE, IDDISCIPLINA),
    FOREIGN KEY (IDDOCENTE) REFERENCES DOCENTE (IDDOCENTE),
    FOREIGN KEY (IDDISCIPLINA) REFERENCES DISCIPLINA (IDDISCIPLINA)
);

-- Cria a tabela TUTOR para estabelecer relações entre tutores e disciplinas
CREATE TABLE TUTOR (
    IDDOCENTE INT NOT NULL,  -- Identificador do docente
    IDDISCIPLINA INT NOT NULL,  -- Identificador da disciplina
    PRIMARY KEY (IDDOCENTE, IDDISCIPLINA),
    FOREIGN KEY (IDDOCENTE) REFERENCES DOCENTE (IDDOCENTE),
    FOREIGN KEY (IDDISCIPLINA) REFERENCES DISCIPLINA (IDDISCIPLINA)
);

-- Cria a tabela ORIENTADOR para estabelecer relações entre orientadores e disciplinas
CREATE TABLE ORIENTADOR (
    IDDOCENTE INT NOT NULL,  -- Identificador do docente
    IDDISCIPLINA INT NOT NULL,  -- Identificador da disciplina
    PRIMARY KEY (IDDOCENTE, IDDISCIPLINA),
    FOREIGN KEY (IDDOCENTE) REFERENCES DOCENTE (IDDOCENTE),
    FOREIGN KEY (IDDISCIPLINA) REFERENCES DISCIPLINA (IDDISCIPLINA)
);

-- Cria a tabela ALUNO para armazenar informações sobre alunos
CREATE TABLE ALUNO (
    IDALUNO INT NOT NULL AUTO_INCREMENT, -- Identificador único do aluno
    NOME VARCHAR(100) NOT NULL,  -- Nome do aluno
    DT_NASC DATE NOT NULL,  -- Data de nascimento do aluno
    PRIMARY KEY (IDALUNO)
);

-- Cria a tabela MATRICULA para registrar as matrículas dos alunos em disciplinas
CREATE TABLE MATRICULA (
    IDMATRICULA INT NOT NULL AUTO_INCREMENT, -- Identificador único da matrícula
    IDALUNO INT NOT NULL,  -- Identificador do aluno
    IDDISCIPLINA INT NOT NULL,  -- Identificador da disciplina
    DT_MATRICULA DATE NOT NULL,  -- Data da matrícula
    PRIMARY KEY (IDMATRICULA),
    FOREIGN KEY (IDALUNO) REFERENCES ALUNO (IDALUNO),
    FOREIGN KEY (IDDISCIPLINA) REFERENCES DISCIPLINA (IDDISCIPLINA)
);

-- Insere dados na tabela DOCENTE para representar professores
INSERT INTO DOCENTE VALUES(1, 'ANDRE');
INSERT INTO DOCENTE VALUES(2, 'LUCIANO');
INSERT INTO DOCENTE VALUES(3, 'ELI');
INSERT INTO DOCENTE VALUES(4, 'JAQUE');
INSERT INTO DOCENTE VALUES(5, 'ADRIANO');

-- Insere dados na tabela DISCIPLINA para representar disciplinas e define a carga horária
INSERT INTO DISCIPLINA VALUES(1, 'MODELAGEM DE DADOS', 80);
INSERT INTO DISCIPLINA VALUES(2, 'ALGORITMO', 80);
INSERT INTO DISCIPLINA VALUES(3, 'INFRAESTRUTURA', 40);
INSERT INTO DISCIPLINA VALUES(4, 'POO', 120);
INSERT INTO DISCIPLINA VALUES(5, 'TCS', 160);
INSERT INTO DISCIPLINA VALUES(6, 'SGDB', 80);

-- Insere dados nas tabelas PROFESSOR, TUTOR e ORIENTADOR para associar professores a disciplinas

INSERT INTO PROFESSOR VALUES(1, 1);
INSERT INTO PROFESSOR VALUES(2, 3);
INSERT INTO PROFESSOR VALUES(3, 2);
INSERT INTO PROFESSOR VALUES(4, 2);
INSERT INTO PROFESSOR VALUES(5, 4);

INSERT INTO ORIENTADOR VALUES(2, 5);
INSERT INTO ORIENTADOR VALUES(3, 5);
INSERT INTO ORIENTADOR VALUES(4, 5);

INSERT INTO TUTOR VALUES(1, 6);

-- Altera a estrutura da tabela DISCIPLINA para adicionar a coluna CARGA_HORARIA
ALTER TABLE DISCIPLINA ADD COLUMN CARGA_HORARIA INT NOT NULL;

-- Atualiza a carga horária de disciplinas específicas
UPDATE DISCIPLINA SET CARGA_HORARIA = 80 WHERE NOME = "MODELAGEM DE DADOS";
UPDATE DISCIPLINA SET CARGA_HORARIA = 80 WHERE NOME = "ALGORITMO";
UPDATE DISCIPLINA SET CARGA_HORARIA = 40 WHERE NOME = "INFRAESTRUTURA";
UPDATE DISCIPLINA SET CARGA_HORARIA = 120 WHERE NOME = "POO";
UPDATE DISCIPLINA SET CARGA_HORARIA = 160 WHERE NOME = "TCS";
UPDATE DISCIPLINA SET CARGA_HORARIA = 80 WHERE NOME = "SGDB";

-- Insere dados na tabela ALUNO para representar alunos
INSERT INTO ALUNO VALUES (1, "ALUNO A", "2001-04-05");
INSERT INTO ALUNO VALUES (2, "ALUNO B", "2001-04-05");
INSERT INTO ALUNO VALUES (3, "ALUNO C", "2001-04-05");
INSERT INTO ALUNO VALUES (4, "ALUNO D", "2001-04-05");
INSERT INTO ALUNO VALUES (5, "ALUNO E", "2001-04-05");

-- Insere dados na tabela MATRICULA para registrar as matrículas dos alunos em disciplinas
INSERT INTO MATRICULA VALUES (1, 1, 1, "2001-04-05");
INSERT INTO MATRICULA VALUES (2, 1, 2, "2001-04-05");
INSERT INTO MATRICULA VALUES (3, 2, 3, "2001-04-05");
INSERT INTO MATRICULA VALUES (4, 2, 4, "2001-04-05");
INSERT INTO MATRICULA VALUES (5, 3, 5, "2001-04-05");
INSERT INTO MATRICULA VALUES (6, 3, 6, "2001-04-05");
INSERT INTO MATRICULA VALUES (7, 4, 1, "2001-04-05");
INSERT INTO MATRICULA VALUES (8, 4, 2, "2001-04-05");
INSERT INTO MATRICULA VALUES (9, 5, 3, "2001-04-05");
INSERT INTO MATRICULA VALUES (10, 5, 4, "2001-04-05");

-- Seleciona dados das tabelas DOCENTE, DISCIPLINA e suas relações
SELECT
    DOCENTE.IDDOCENTE,  -- Identificador do docente
    DOCENTE.NOME,  -- Nome do docente
    DISCIPLINA.IDDISCIPLINA,  -- Identificador da disciplina
    DISCIPLINA.NOME  -- Nome da disciplina
